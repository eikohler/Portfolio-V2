import React, { useState } from 'react';
import Modal from '../Modal';

function PhotoList(){

  const [isModalOpen, setIsModalOpen] = useState(false);

  const [photos] = useState([
    {
      name: 'Dev Hangout',
      description: 'Built with another developer, we created a chatting app made for developers to hangout, discuss projects and learn from eachother!',
      link:'https://dry-journey-51162.herokuapp.com/',
      github:'https://github.com/AgentA12/Dev-Hangout'
    },
    {
      name: 'Raptors Fan Page',
      description: 'An early project made with other developers, we created a Toronto Raptors basketball team fanpage for all raptors fans!',
      link:'https://ayvavalenti.github.io/super-cool-project/',
      github:'https://github.com/ayvavalenti/super-cool-project'
    },  
    {
      name: 'Work Day Scheduler',
      description: 'Created a work day schedule web app that uses jQuery, Bootstrap, jQuery UI and font awesome icons third party API. Displays 9-5 working hours in the day and color codes based on time of the day, i.e, past, present or future. Displays the current date at the top of the page. When then user enters a note in a specific time block and clicks the subsequent save icon the note is saved for that timeblock and remains in local storage to be pulled from and filled back in if the page is refreshed.',
      link:'https://eikohler.github.io/Work-Day-Scheduler/',
      github:'https://github.com/eikohler/Work-Day-Scheduler'
    },  
    {
      name: 'Note Taker',
      description: 'I was tasked with creating a note taker application using express js to build a functioning api that could GET all the notes in the data json file, and POST new notes to the file as well. Furthermore, the front-end of the application was pre-coded so I needed to build the html routes that would display the index and notes html files from a GET request as well. The application can be used to add note, view all notes as well as delete notes. Deleting notes was done through a DELETE request that searches through the data json by id and removes the corresponding element and then rewrites the data json file again. The application is hosted through heroku. The application was tested using jest module. Each note entry has a unique ID generated through uuid module.',
      link:'https://blooming-garden-85714.herokuapp.com/',
      github:'https://github.com/eikohler/Note-Taker'
    },  
    {
      name: 'Weather Dashboard',
      description: 'In this challenge I was tasked with creating a weather app where users can search by city name and view the weather status for that city. The data for the weather is being pulled from the open weather api and all searched city entries that can be found from that api upon search are stored locally to be pulled from whenever the user revisits the app. If the user clicks a previous search it will display the weather data for that city as well. This was made using html, css, javascript, jquery and bootstrap.',
      link:'https://eikohler.github.io/Weather-Application/',
      github:'https://github.com/eikohler/Weather-Application'
    },  
    {
      name: 'Password Generator',
      description: "Task was to create a password generator that prompts the user for how they want the password to be built. I.e. asks length of the password and the character types (upper, lower, numeric and special). Then with the user's input, the password is generated by iterating through the specified password length and based on the selected character types, a character is selected randomly and appended to the password. On completion of the iteration the password is displayed in the box.",
      link:'https://eikohler.github.io/Password-Generator/',
      github:'https://github.com/eikohler/Password-Generator'
    },  
  ]);

  const [currentPhoto, setCurrentPhoto] = useState();

  const toggleModal = (image, i) => {
    setCurrentPhoto({...image, index: i});
    setIsModalOpen(!isModalOpen);
  }

  return (
    <section>
      <div>
        {isModalOpen && (
          <Modal currentPhoto={currentPhoto} onClose={toggleModal} />
        )}
        <div className="row">
          {photos.map((image, i) => (     
            <div className='col-6 px-3' key={image.name}>
              <img
                src={require(`../../assets/portfolio-images/${i}.jpg`)}
                alt={image.name}
                className="img-thumbnail w-100"
                onClick={() => toggleModal(image, i)}
                key={image.name}
              /> 
            </div>                                          
          ))}
        </div>
      </div>
    </section>
  );
};

export default PhotoList;